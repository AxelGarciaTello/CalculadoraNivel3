/* Calculadora Hoc2 */
package ejemplo_hoc2;
import java_cup.runtime.*;
import java.io.FileReader;

class AnalizadorSintactico;

parser code {:
        FrmPrincipal2 frmInterfaz;
        Float variables[] = new Float[26];

	public void report_error(String mensaje, Object info){
		StringBuilder m = new StringBuilder("Error");
		if(info instanceof java_cup.runtime.Symbol){
			java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;
			if(s.left >= 0){
				m.append(" en la linea " + (s.left+1));
				if(s.right >= 0){
					m.append(", columna " + (s.right+1));
				}
			}
		}
		m.append(" : " + mensaje);
		System.err.println(m);
	}

	public void report_fatal_error(String message, Object info){
		report_error(message, info);
		System.exit(1);
	}

:}

terminal OpSuma, OpResta, OpProd, OpDiv, OpAsig;
terminal ParIzq, ParDer, Enter;
terminal Float NUM;
terminal Integer VAR;
terminal UMINUS;
terminal Float PI, E, GAMMA, DEG, PHI;
terminal SIN, COS, ATAN, EXP, LOG, LOG10, SQRT, INT, ABS;
terminal OpPot;

non terminal list;
non terminal Float asgn, expr;

/* Precedences */
precedence right OpAsig;
precedence left OpSuma, OpResta;
precedence left OpProd, OpDiv;
precedence left OpPot;
precedence left UMINUS;

list	::=
	| Enter
	| list expr:e Enter {: frmInterfaz.PonerTextSintac(Float.toString(e) + "\n"); :}
	;

asgn	::= VAR:indVar OpAsig expr:valExpr  {: RESULT = variables[indVar]= valExpr; :}
	;

expr	::= NUM:valNum      {: RESULT = valNum; :}
	| VAR:indVar        {: RESULT = variables[indVar]; :}
        | PI:valPi          {: RESULT = valPi; :}
        | E:e               {: RESULT = e; :}
        | GAMMA:valGa       {: RESULT = valGa; :}
        | DEG:valDeg        {: RESULT = valDeg; :}
        | PHI:valPhi        {: RESULT = valPhi; :}
	| asgn:valAsgn      {: RESULT = valAsgn; :}
	| expr:e1 OpSuma expr:e2 {: RESULT = e1+e2; :}
	| expr:e1 OpResta expr:e2   {: RESULT = e1-e2; :}
	| expr:e1 OpProd expr:e2    {: RESULT = e1*e2; :}
	| expr:e1 OpDiv expr:e2     {: RESULT = e1/e2; :}
        | expr:e1 OpPot expr:e2     {: RESULT = (float) Math.pow(e1,e2); :}
	| ParIzq expr:e ParDer  {: RESULT = e; :}
        | SIN ParIzq expr:e ParDer {: RESULT = (float) Math.sin(e); :}
        | COS ParIzq expr:e ParDer {: RESULT = (float) Math.cos(e); :}
        | ATAN ParIzq expr:e ParDer {: RESULT = (float) Math.atan(e); :}
        | EXP ParIzq expr:e ParDer {: RESULT = (float) Math.exp(e); :}
        | LOG ParIzq expr:e ParDer {: RESULT = (float) Math.log(e); :}
        | LOG10 ParIzq expr:e ParDer {: RESULT = (float) Math.log10(e); :}
        | SQRT ParIzq expr:e ParDer {: RESULT = (float) Math.sqrt(e); :}
        | INT ParIzq expr:e ParDer {: RESULT = (float) Math.round(e); :}
        | ABS ParIzq expr:e ParDer {: RESULT = (float) Math.abs(e); :}
	| OpResta expr:e    {: RESULT = -e; :} %prec UMINUS
	;

	
